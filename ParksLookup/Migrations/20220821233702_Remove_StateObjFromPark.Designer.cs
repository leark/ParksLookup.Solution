// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParksLookup.Models;

namespace ParksLookup.Migrations
{
    [DbContext(typeof(ParksLookupContext))]
    [Migration("20220821233702_Remove_StateObjFromPark")]
    partial class Remove_StateObjFromPark
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ParksLookup.Models.Park", b =>
                {
                    b.Property<int>("ParkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<bool>("StatePark")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ParkId");

                    b.ToTable("Parks");

                    b.HasData(
                        new
                        {
                            ParkId = 1,
                            Description = "An active volcano in Washington State.",
                            Name = "Mount Rainier",
                            StateId = 53,
                            StatePark = false,
                            Website = "https://www.nps.gov/mora/index.htm"
                        });
                });

            modelBuilder.Entity("ParksLookup.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbr")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("StateId");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            StateId = 1,
                            Abbr = "AL",
                            Name = "Alabama"
                        },
                        new
                        {
                            StateId = 2,
                            Abbr = "AK",
                            Name = "Alaska"
                        },
                        new
                        {
                            StateId = 4,
                            Abbr = "AZ",
                            Name = "Arizona"
                        },
                        new
                        {
                            StateId = 5,
                            Abbr = "AR",
                            Name = "Arkansas"
                        },
                        new
                        {
                            StateId = 6,
                            Abbr = "CA",
                            Name = "California"
                        },
                        new
                        {
                            StateId = 8,
                            Abbr = "CO",
                            Name = "Colorado"
                        },
                        new
                        {
                            StateId = 9,
                            Abbr = "CT",
                            Name = "Connecticut"
                        },
                        new
                        {
                            StateId = 10,
                            Abbr = "DE",
                            Name = "Delaware"
                        },
                        new
                        {
                            StateId = 11,
                            Abbr = "DC",
                            Name = "District of Columbia"
                        },
                        new
                        {
                            StateId = 12,
                            Abbr = "FL",
                            Name = "Florida"
                        },
                        new
                        {
                            StateId = 13,
                            Abbr = "13",
                            Name = "Georgia"
                        },
                        new
                        {
                            StateId = 15,
                            Abbr = "15",
                            Name = "Hawaii"
                        },
                        new
                        {
                            StateId = 16,
                            Abbr = "ID",
                            Name = "Idaho"
                        },
                        new
                        {
                            StateId = 17,
                            Abbr = "IL",
                            Name = "Illinois"
                        },
                        new
                        {
                            StateId = 18,
                            Abbr = "IN",
                            Name = "Indiana"
                        },
                        new
                        {
                            StateId = 19,
                            Abbr = "IA",
                            Name = "Iowa"
                        },
                        new
                        {
                            StateId = 20,
                            Abbr = "KS",
                            Name = "Kansas"
                        },
                        new
                        {
                            StateId = 21,
                            Abbr = "21",
                            Name = "Kentucky"
                        },
                        new
                        {
                            StateId = 22,
                            Abbr = "LA",
                            Name = "Louisiana"
                        },
                        new
                        {
                            StateId = 23,
                            Abbr = "ME",
                            Name = "Maine"
                        },
                        new
                        {
                            StateId = 24,
                            Abbr = "MD",
                            Name = "Maryland"
                        },
                        new
                        {
                            StateId = 25,
                            Abbr = "MA",
                            Name = "Massachusetts"
                        },
                        new
                        {
                            StateId = 26,
                            Abbr = "MI",
                            Name = "Michigan"
                        },
                        new
                        {
                            StateId = 27,
                            Abbr = "MN",
                            Name = "Minnesota"
                        },
                        new
                        {
                            StateId = 28,
                            Abbr = "MS",
                            Name = "Mississippi"
                        },
                        new
                        {
                            StateId = 29,
                            Abbr = "MO",
                            Name = "Missouri"
                        },
                        new
                        {
                            StateId = 30,
                            Abbr = "MT",
                            Name = "Montana"
                        },
                        new
                        {
                            StateId = 31,
                            Abbr = "NE",
                            Name = "Nebraska"
                        },
                        new
                        {
                            StateId = 32,
                            Abbr = "NV",
                            Name = "Nevada"
                        },
                        new
                        {
                            StateId = 33,
                            Abbr = "NH",
                            Name = "New Hampshire"
                        },
                        new
                        {
                            StateId = 34,
                            Abbr = "NJ",
                            Name = "New Jersey"
                        },
                        new
                        {
                            StateId = 35,
                            Abbr = "NM",
                            Name = "New Mexico"
                        },
                        new
                        {
                            StateId = 36,
                            Abbr = "NY",
                            Name = "New York"
                        },
                        new
                        {
                            StateId = 37,
                            Abbr = "NC",
                            Name = "North Carolina"
                        },
                        new
                        {
                            StateId = 38,
                            Abbr = "ND",
                            Name = "North Dakota	"
                        },
                        new
                        {
                            StateId = 39,
                            Abbr = "OH",
                            Name = "Ohio"
                        },
                        new
                        {
                            StateId = 40,
                            Abbr = "OK",
                            Name = "Oklahoma"
                        },
                        new
                        {
                            StateId = 41,
                            Abbr = "OR",
                            Name = "Oregon"
                        },
                        new
                        {
                            StateId = 42,
                            Abbr = "PA",
                            Name = "Pennsylvania"
                        },
                        new
                        {
                            StateId = 44,
                            Abbr = "RI",
                            Name = "Rhode Island	"
                        },
                        new
                        {
                            StateId = 45,
                            Abbr = "SC",
                            Name = "South Carolina"
                        },
                        new
                        {
                            StateId = 46,
                            Abbr = "SD",
                            Name = "South Dakota	"
                        },
                        new
                        {
                            StateId = 47,
                            Abbr = "TN",
                            Name = "Tennessee"
                        },
                        new
                        {
                            StateId = 48,
                            Abbr = "TX",
                            Name = "Texas"
                        },
                        new
                        {
                            StateId = 49,
                            Abbr = "UT",
                            Name = "Utah"
                        },
                        new
                        {
                            StateId = 50,
                            Abbr = "VT",
                            Name = "Vermont"
                        },
                        new
                        {
                            StateId = 51,
                            Abbr = "VA",
                            Name = "Virgin Islands	"
                        },
                        new
                        {
                            StateId = 53,
                            Abbr = "WA",
                            Name = "Washington"
                        },
                        new
                        {
                            StateId = 54,
                            Abbr = "WV",
                            Name = "West Virginia	"
                        },
                        new
                        {
                            StateId = 55,
                            Abbr = "WI",
                            Name = "Wisconsin"
                        },
                        new
                        {
                            StateId = 56,
                            Abbr = "WY",
                            Name = "Wyoming"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
